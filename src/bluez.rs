// This code was autogenerated with dbus-codegen-rust, see https://github.com/diwic/dbus-rs

#![allow(dead_code)]
use dbus as dbus;
use dbus::arg;
use dbus::tree;

pub trait OrgFreedesktopDBusIntrospectable {
    type Err;
    fn introspect(&self) -> Result<String, Self::Err>;
}

impl<'a, C: ::std::ops::Deref<Target=dbus::Connection>> OrgFreedesktopDBusIntrospectable for dbus::ConnPath<'a, C> {
    type Err = dbus::Error;

    fn introspect(&self) -> Result<String, Self::Err> {
        let mut m = self.method_call_with_args(&"org.freedesktop.DBus.Introspectable".into(), &"Introspect".into(), |_| {
        })?;
        m.as_result()?;
        let mut i = m.iter_init();
        let xml: String = i.read()?;
        Ok(xml)
    }
}

pub fn org_freedesktop_dbus_introspectable_server<F, T, D>(factory: &tree::Factory<tree::MTFn<D>, D>, data: D::Interface, f: F) -> tree::Interface<tree::MTFn<D>, D>
where
    D: tree::DataType,
    D::Method: Default,
    T: OrgFreedesktopDBusIntrospectable<Err=tree::MethodErr>,
    F: 'static + for <'z> Fn(& 'z tree::MethodInfo<tree::MTFn<D>, D>) -> & 'z T,
{
    let i = factory.interface("org.freedesktop.DBus.Introspectable", data);
    let f = ::std::sync::Arc::new(f);
    let fclone = f.clone();
    let h = move |minfo: &tree::MethodInfo<tree::MTFn<D>, D>| {
        let d = fclone(minfo);
        let xml = d.introspect()?;
        let rm = minfo.msg.method_return();
        let rm = rm.append1(xml);
        Ok(vec!(rm))
    };
    let m = factory.method("Introspect", Default::default(), h);
    let m = m.out_arg(("xml", "s"));
    let i = i.add_m(m);
    i
}

pub trait OrgBluezAgentManager1 {
    type Err;
    fn register_agent(&self, agent: dbus::Path, capability: &str) -> Result<(), Self::Err>;
    fn unregister_agent(&self, agent: dbus::Path) -> Result<(), Self::Err>;
    fn request_default_agent(&self, agent: dbus::Path) -> Result<(), Self::Err>;
}

impl<'a, C: ::std::ops::Deref<Target=dbus::Connection>> OrgBluezAgentManager1 for dbus::ConnPath<'a, C> {
    type Err = dbus::Error;

    fn register_agent(&self, agent: dbus::Path, capability: &str) -> Result<(), Self::Err> {
        let mut m = self.method_call_with_args(&"org.bluez.AgentManager1".into(), &"RegisterAgent".into(), |msg| {
            let mut i = arg::IterAppend::new(msg);
            i.append(agent);
            i.append(capability);
        })?;
        m.as_result()?;
        Ok(())
    }

    fn unregister_agent(&self, agent: dbus::Path) -> Result<(), Self::Err> {
        let mut m = self.method_call_with_args(&"org.bluez.AgentManager1".into(), &"UnregisterAgent".into(), |msg| {
            let mut i = arg::IterAppend::new(msg);
            i.append(agent);
        })?;
        m.as_result()?;
        Ok(())
    }

    fn request_default_agent(&self, agent: dbus::Path) -> Result<(), Self::Err> {
        let mut m = self.method_call_with_args(&"org.bluez.AgentManager1".into(), &"RequestDefaultAgent".into(), |msg| {
            let mut i = arg::IterAppend::new(msg);
            i.append(agent);
        })?;
        m.as_result()?;
        Ok(())
    }
}

pub fn org_bluez_agent_manager1_server<F, T, D>(factory: &tree::Factory<tree::MTFn<D>, D>, data: D::Interface, f: F) -> tree::Interface<tree::MTFn<D>, D>
where
    D: tree::DataType,
    D::Method: Default,
    T: OrgBluezAgentManager1<Err=tree::MethodErr>,
    F: 'static + for <'z> Fn(& 'z tree::MethodInfo<tree::MTFn<D>, D>) -> & 'z T,
{
    let i = factory.interface("org.bluez.AgentManager1", data);
    let f = ::std::sync::Arc::new(f);
    let fclone = f.clone();
    let h = move |minfo: &tree::MethodInfo<tree::MTFn<D>, D>| {
        let mut i = minfo.msg.iter_init();
        let agent: dbus::Path = i.read()?;
        let capability: &str = i.read()?;
        let d = fclone(minfo);
        d.register_agent(agent, capability)?;
        let rm = minfo.msg.method_return();
        Ok(vec!(rm))
    };
    let m = factory.method("RegisterAgent", Default::default(), h);
    let m = m.in_arg(("agent", "o"));
    let m = m.in_arg(("capability", "s"));
    let i = i.add_m(m);

    let fclone = f.clone();
    let h = move |minfo: &tree::MethodInfo<tree::MTFn<D>, D>| {
        let mut i = minfo.msg.iter_init();
        let agent: dbus::Path = i.read()?;
        let d = fclone(minfo);
        d.unregister_agent(agent)?;
        let rm = minfo.msg.method_return();
        Ok(vec!(rm))
    };
    let m = factory.method("UnregisterAgent", Default::default(), h);
    let m = m.in_arg(("agent", "o"));
    let i = i.add_m(m);

    let fclone = f.clone();
    let h = move |minfo: &tree::MethodInfo<tree::MTFn<D>, D>| {
        let mut i = minfo.msg.iter_init();
        let agent: dbus::Path = i.read()?;
        let d = fclone(minfo);
        d.request_default_agent(agent)?;
        let rm = minfo.msg.method_return();
        Ok(vec!(rm))
    };
    let m = factory.method("RequestDefaultAgent", Default::default(), h);
    let m = m.in_arg(("agent", "o"));
    let i = i.add_m(m);
    i
}

pub trait OrgBluezProfileManager1 {
    type Err;
    fn register_profile(&self, profile: dbus::Path, uuid: &str, options: ::std::collections::HashMap<&str, arg::Variant<Box<arg::RefArg>>>) -> Result<(), Self::Err>;
    fn unregister_profile(&self, profile: dbus::Path) -> Result<(), Self::Err>;
}

impl<'a, C: ::std::ops::Deref<Target=dbus::Connection>> OrgBluezProfileManager1 for dbus::ConnPath<'a, C> {
    type Err = dbus::Error;

    fn register_profile(&self, profile: dbus::Path, uuid: &str, options: ::std::collections::HashMap<&str, arg::Variant<Box<arg::RefArg>>>) -> Result<(), Self::Err> {
        let mut m = self.method_call_with_args(&"org.bluez.ProfileManager1".into(), &"RegisterProfile".into(), |msg| {
            let mut i = arg::IterAppend::new(msg);
            i.append(profile);
            i.append(uuid);
            i.append(options);
        })?;
        m.as_result()?;
        Ok(())
    }

    fn unregister_profile(&self, profile: dbus::Path) -> Result<(), Self::Err> {
        let mut m = self.method_call_with_args(&"org.bluez.ProfileManager1".into(), &"UnregisterProfile".into(), |msg| {
            let mut i = arg::IterAppend::new(msg);
            i.append(profile);
        })?;
        m.as_result()?;
        Ok(())
    }
}

pub fn org_bluez_profile_manager1_server<F, T, D>(factory: &tree::Factory<tree::MTFn<D>, D>, data: D::Interface, f: F) -> tree::Interface<tree::MTFn<D>, D>
where
    D: tree::DataType,
    D::Method: Default,
    T: OrgBluezProfileManager1<Err=tree::MethodErr>,
    F: 'static + for <'z> Fn(& 'z tree::MethodInfo<tree::MTFn<D>, D>) -> & 'z T,
{
    let i = factory.interface("org.bluez.ProfileManager1", data);
    let f = ::std::sync::Arc::new(f);
    let fclone = f.clone();
    let h = move |minfo: &tree::MethodInfo<tree::MTFn<D>, D>| {
        let mut i = minfo.msg.iter_init();
        let profile: dbus::Path = i.read()?;
        let uuid: &str = i.read()?;
        let options: ::std::collections::HashMap<&str, arg::Variant<Box<arg::RefArg>>> = i.read()?;
        let d = fclone(minfo);
        d.register_profile(profile, uuid, options)?;
        let rm = minfo.msg.method_return();
        Ok(vec!(rm))
    };
    let m = factory.method("RegisterProfile", Default::default(), h);
    let m = m.in_arg(("profile", "o"));
    let m = m.in_arg(("UUID", "s"));
    let m = m.in_arg(("options", "a{sv}"));
    let i = i.add_m(m);

    let fclone = f.clone();
    let h = move |minfo: &tree::MethodInfo<tree::MTFn<D>, D>| {
        let mut i = minfo.msg.iter_init();
        let profile: dbus::Path = i.read()?;
        let d = fclone(minfo);
        d.unregister_profile(profile)?;
        let rm = minfo.msg.method_return();
        Ok(vec!(rm))
    };
    let m = factory.method("UnregisterProfile", Default::default(), h);
    let m = m.in_arg(("profile", "o"));
    let i = i.add_m(m);
    i
}
